services:
  # Main Backend API Gateway
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:8000"
    environment:
      - DEBUG=true
      - DB_SERVICE_URL=${DB_SERVICE_URL}
      - ML_SERVICE_URL=http://ml-service:${ML_SERVICE_PORT}
      - NODE_ENV=${NODE_ENV}
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      db-service:
        condition: service_healthy
    networks:
      - timele-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:80"
    environment:
      - DEBUG=true
      - DB_SERVICE_URL=${DB_SERVICE_URL}
#      - ML_SERVICE_URL=http://localhost:5002
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - backend
    networks:
      - timele-network
    restart: unless-stopped

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app
      - ML_SERVICE_PORT=8001
      - MODEL_PATH_BASE=/app/models
      - PROCESSED_DATA_PATH=/app/training-data/processed
      - RAW_DATA_PATH=/app/training-data
    ports:
      - "${ML_SERVICE_PORT}:8001"
    depends_on:
      db-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./data:/app/training-data
      - ml_models:/app/models
    networks:
      - timele-network
    restart: unless-stopped

  db-service:
    build:
      context: db_service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DB_SERVICE_PORT=7000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db_service/data:/app/csv_data
    networks:
      - timele-network
    restart: unless-stopped

  postgres:
    image: postgres:17
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - timele-network
    restart: unless-stopped

volumes:
  postgres_data:
  ml_models:

networks:
  timele-network:
    driver: bridge
